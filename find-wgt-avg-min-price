{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "21dbd0f7-5ec2-40c8-9adf-f13f286d1c2a",
   "metadata": {},
   "source": [
    "## Using Python to do Technical Analysis: Find Weighted Average Minimum Price of a Stock\n",
    "### The goal is to find a Weighted-Average Support Level (i.e. a floor price) across multiple time periods"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "93b2fce7-e644-41dd-9f0b-c71c521a3fd6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import necessary libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import yfinance as yf\n",
    "from datetime import datetime, timedelta"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9340babc-004f-4fd7-80fb-49773afd751e",
   "metadata": {},
   "source": [
    "### Fetch historical stock data from yfinance and place it in a dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "id": "8b9615e6-6df2-4654-8e41-9473b63a7333",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume</th>\n",
       "      <th>Dividends</th>\n",
       "      <th>Stock Splits</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1972-06-01 00:00:00-04:00</td>\n",
       "      <td>0.148763</td>\n",
       "      <td>0.151051</td>\n",
       "      <td>0.148763</td>\n",
       "      <td>0.151051</td>\n",
       "      <td>2458771</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1972-06-02 00:00:00-04:00</td>\n",
       "      <td>0.151051</td>\n",
       "      <td>0.151509</td>\n",
       "      <td>0.148763</td>\n",
       "      <td>0.149220</td>\n",
       "      <td>1613885</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1972-06-05 00:00:00-04:00</td>\n",
       "      <td>0.149220</td>\n",
       "      <td>0.149678</td>\n",
       "      <td>0.147847</td>\n",
       "      <td>0.148763</td>\n",
       "      <td>2585251</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1972-06-06 00:00:00-04:00</td>\n",
       "      <td>0.148762</td>\n",
       "      <td>0.152882</td>\n",
       "      <td>0.148305</td>\n",
       "      <td>0.151966</td>\n",
       "      <td>2347469</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1972-06-07 00:00:00-04:00</td>\n",
       "      <td>0.151966</td>\n",
       "      <td>0.151966</td>\n",
       "      <td>0.149678</td>\n",
       "      <td>0.151966</td>\n",
       "      <td>1032077</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13438</th>\n",
       "      <td>2025-09-22 00:00:00-04:00</td>\n",
       "      <td>24.280001</td>\n",
       "      <td>24.799999</td>\n",
       "      <td>24.030001</td>\n",
       "      <td>24.040001</td>\n",
       "      <td>67863300</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13439</th>\n",
       "      <td>2025-09-23 00:00:00-04:00</td>\n",
       "      <td>24.100000</td>\n",
       "      <td>24.360001</td>\n",
       "      <td>24.049999</td>\n",
       "      <td>24.129999</td>\n",
       "      <td>38955200</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13440</th>\n",
       "      <td>2025-09-24 00:00:00-04:00</td>\n",
       "      <td>24.170000</td>\n",
       "      <td>24.180000</td>\n",
       "      <td>23.980000</td>\n",
       "      <td>24.090000</td>\n",
       "      <td>39669400</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13441</th>\n",
       "      <td>2025-09-25 00:00:00-04:00</td>\n",
       "      <td>24.090000</td>\n",
       "      <td>24.150000</td>\n",
       "      <td>23.580000</td>\n",
       "      <td>23.600000</td>\n",
       "      <td>56738300</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13442</th>\n",
       "      <td>2025-09-26 00:00:00-04:00</td>\n",
       "      <td>23.730000</td>\n",
       "      <td>23.809999</td>\n",
       "      <td>23.610001</td>\n",
       "      <td>23.760000</td>\n",
       "      <td>33327100</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>13443 rows Ã— 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                           Date       Open       High        Low      Close  \\\n",
       "0     1972-06-01 00:00:00-04:00   0.148763   0.151051   0.148763   0.151051   \n",
       "1     1972-06-02 00:00:00-04:00   0.151051   0.151509   0.148763   0.149220   \n",
       "2     1972-06-05 00:00:00-04:00   0.149220   0.149678   0.147847   0.148763   \n",
       "3     1972-06-06 00:00:00-04:00   0.148762   0.152882   0.148305   0.151966   \n",
       "4     1972-06-07 00:00:00-04:00   0.151966   0.151966   0.149678   0.151966   \n",
       "...                         ...        ...        ...        ...        ...   \n",
       "13438 2025-09-22 00:00:00-04:00  24.280001  24.799999  24.030001  24.040001   \n",
       "13439 2025-09-23 00:00:00-04:00  24.100000  24.360001  24.049999  24.129999   \n",
       "13440 2025-09-24 00:00:00-04:00  24.170000  24.180000  23.980000  24.090000   \n",
       "13441 2025-09-25 00:00:00-04:00  24.090000  24.150000  23.580000  23.600000   \n",
       "13442 2025-09-26 00:00:00-04:00  23.730000  23.809999  23.610001  23.760000   \n",
       "\n",
       "         Volume  Dividends  Stock Splits  \n",
       "0       2458771        0.0           0.0  \n",
       "1       1613885        0.0           0.0  \n",
       "2       2585251        0.0           0.0  \n",
       "3       2347469        0.0           0.0  \n",
       "4       1032077        0.0           0.0  \n",
       "...         ...        ...           ...  \n",
       "13438  67863300        0.0           0.0  \n",
       "13439  38955200        0.0           0.0  \n",
       "13440  39669400        0.0           0.0  \n",
       "13441  56738300        0.0           0.0  \n",
       "13442  33327100        0.0           0.0  \n",
       "\n",
       "[13443 rows x 8 columns]"
      ]
     },
     "execution_count": 151,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Fetch historical stock data from yahoo based on user inputs. Default Interval is 1 day (can be 1d, 1wk, 1mo, 3mo, etc)\n",
    "def fetch_stock_data(symbol, years, interval):\n",
    "    stock_data = (\n",
    "        yf.Ticker(symbol).history(\n",
    "            start=datetime.now() - timedelta(days=365 * years), \n",
    "            end=datetime.now(), \n",
    "            interval=interval\n",
    "        )\n",
    "        .reset_index())  # Adds date as a column\n",
    "\n",
    "    return pd.DataFrame(stock_data)\n",
    "\n",
    "# Display the full data for the last 100 years\n",
    "fetch_stock_data('pfe', 100, '1d')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "63f00fd0-5755-4f87-966a-3a8d54a4b5e5",
   "metadata": {},
   "source": [
    "### Find a stock's minimum close price across multiple time intervals, then average them according to weights\n",
    "\n",
    "| Time Period | Weight |\n",
    "|----------|--------|\n",
    "| 1 Month  | 20%    |\n",
    "| 3 Months | 20%    |\n",
    "| 6 Months | 15%    |\n",
    "| 1 Year   | 15%    |\n",
    "| 2 Years  | 10%    |\n",
    "| 3 Years  | 10%    |\n",
    "| 5 Years  | 5%     |\n",
    "| 10 Years | 5%     |"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "id": "0f392152-eacf-4f7a-816b-4fea32ecbfa8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# The idea is to predict the 'floor' for selling put options, with heavier weight on \n",
    "# more recent price movements while not ignoring long-term trends. \n",
    "\n",
    "def wgt_avg_min_close_price(symbol, periods, weights):\n",
    "        \n",
    "    now = datetime.now()\n",
    "    \n",
    "    mins = []  # To hold weighted minimums\n",
    "\n",
    "    # Fetch 10 years of data\n",
    "    all_data = fetch_stock_data(symbol, 10, '1d')\n",
    "    \n",
    "    # Convert to datetime and remove timezone\n",
    "    all_data['Date'] = pd.to_datetime(all_data['Date']).dt.tz_localize(None)\n",
    "\n",
    "    # For each period, calculate the cutoff date, filter data from that date onward,\n",
    "    # then find the minimum close price in that slice and append the weighted value to mins\n",
    "    for period, weight in zip(periods, weights):\n",
    "        cutoff = now - timedelta(days=int(period * 365))\n",
    "        sliced = all_data[all_data['Date'] >= cutoff]\n",
    "        \n",
    "        if not sliced.empty:\n",
    "            min_close = sliced['Close'].min()\n",
    "            mins.append(min_close * weight)\n",
    "            \n",
    "            # Uncomment the following line if you'd like to see the minimum values\n",
    "            print(f\"{round(period,2)}-Year Min: ${min_close:.2f}\")  \n",
    "    return sum(mins)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48278d61-5135-4282-9ce1-3276ef04fd3f",
   "metadata": {},
   "source": [
    "### Define User Inputs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "id": "ebfd92c4-29c0-4396-bb1d-8175599d68df",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.08-Year Min: $23.60\n",
      "0.25-Year Min: $23.29\n",
      "0.5-Year Min: $20.83\n",
      "1-Year Min: $20.83\n",
      "2-Year Min: $20.83\n",
      "3-Year Min: $20.83\n",
      "5-Year Min: $20.83\n",
      "10-Year Min: $18.10\n",
      "\n",
      "Wgt Avg Min Close Price for PFE Stock: $21.74\n"
     ]
    }
   ],
   "source": [
    "my_symbol = \"PFE\"\n",
    "\n",
    "# Time periods in years and corresponding weights\n",
    "periods = [1/12, 1/4, 1/2, 1, 2, 3, 5, 10]  \n",
    "weights = [0.2, 0.2, 0.15, 0.15, 0.1, 0.1, 0.05, 0.05]\n",
    "\n",
    "wgt_avg_min = wgt_avg_min_close_price(my_symbol, periods, weights)\n",
    "    \n",
    "print(f\"\\nWgt Avg Min Close Price for {my_symbol} Stock: ${wgt_avg_min:.2f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f3ce1668-d6f7-4071-bb4b-53aace20fbac",
   "metadata": {},
   "source": [
    "### We can even get more granular and run many more time periods and weights.\n",
    "### But the number of elements in each list must be the same! And the weights must sum to 100%\n",
    "| Interval  | Weight |\n",
    "|-----------|--------|\n",
    "| Month 1   | 5%     |\n",
    "| Month 2   | 5%     |\n",
    "| Month 3   | 5%     |\n",
    "| Month 4   | 5%     |\n",
    "| Month 5   | 5%     |\n",
    "| Month 6   | 5%     |\n",
    "| Month 7   | 5%     |\n",
    "| Month 8   | 5%     |\n",
    "| Month 9   | 5%     |\n",
    "| Month 10  | 5%     |\n",
    "| Month 11  | 5%     |\n",
    "| Month 12  | 5%     |\n",
    "| Month 18  | 4%     |\n",
    "| Year 2    | 4%     |\n",
    "| Year 3    | 4%     |\n",
    "| Year 4    | 4%     |\n",
    "| Year 5    | 4%     |\n",
    "| Year 6    | 4%     |\n",
    "| Year 7    | 4%     |\n",
    "| Year 8    | 4%     |\n",
    "| Year 9    | 4%     |\n",
    "| Year 10   | 4%     |\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "id": "77143ae4-cae5-4bf7-80c0-a0e1ed3511e7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.08-Year Min: $23.60\n",
      "0.17-Year Min: $23.29\n",
      "0.25-Year Min: $23.29\n",
      "0.33-Year Min: $22.73\n",
      "0.42-Year Min: $21.65\n",
      "0.5-Year Min: $20.83\n",
      "0.58-Year Min: $20.83\n",
      "0.67-Year Min: $20.83\n",
      "0.75-Year Min: $20.83\n",
      "0.83-Year Min: $20.83\n",
      "0.92-Year Min: $20.83\n",
      "1.0-Year Min: $20.83\n",
      "1.5-Year Min: $20.83\n",
      "2-Year Min: $20.83\n",
      "3-Year Min: $20.83\n",
      "4-Year Min: $20.83\n",
      "5-Year Min: $20.83\n",
      "6-Year Min: $20.83\n",
      "7-Year Min: $20.83\n",
      "8-Year Min: $20.83\n",
      "9-Year Min: $19.27\n",
      "10-Year Min: $18.10\n",
      "\n",
      "Weighted Average Minimum Close Price for PFE Stock: $21.18\n"
     ]
    }
   ],
   "source": [
    "periods = [1/12, 2/12, 3/12, 4/12, 5/12, 6/12, \n",
    "           7/12, 8/12, 9/12, 10/12, 11/12, 12/12, \n",
    "           18/12, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
    "\n",
    "weights = [0.05, 0.05, 0.05, 0.05, 0.05, 0.05, \n",
    "           0.05, 0.05, 0.05, 0.05, 0.05, 0.05, \n",
    "           0.04, 0.04, 0.04, 0.04, 0.04, \n",
    "           0.04, 0.04, 0.04, 0.04, 0.04]\n",
    "           \n",
    "my_symbol = \"PFE\"\n",
    "\n",
    "wgt_avg_min = wgt_avg_min_close_price(my_symbol, periods, weights)\n",
    "    \n",
    "print(f\"\\nWeighted Average Minimum Close Price for {my_symbol} Stock: ${wgt_avg_min:.2f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "291f8e29-cb4f-4584-9b1b-5311c74e33cc",
   "metadata": {},
   "source": [
    "#### As you can observe, the original weighted average minimum was 21.74\n",
    "#### But after adding more time periods and weights, it decreased by more than 50 cents to 21.18\n",
    "#### Furthermore, there seems to be a VERY strong support level at 20.83 (e.g. basically a strike of 21)\n",
    "\n",
    "#### Now I can be reasonably certain the stock won't fall below 21\n",
    "#### Even though it was recently that low, that's a historical low\n",
    "#### The current price is around 24 per share. \n",
    "#### So 22-23 might be a pretty safe strike price to sell puts, given the floor of 21 per share"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8a7594e1-a5d8-4766-bc39-d7aff5b09504",
   "metadata": {},
   "source": [
    "# Why This Matters\n",
    "#### If I'm writing a put option, I want to be fairly certain my selected strike price is reasonably low to collect premium\n",
    " But not so low that I get assigned (e.g. I'm forced to buy the shares below market value for an unrealized loss)\n",
    "#### This is one method of technical analysis that models the minimum 'floor' price based on actual data \n",
    "(We're using actual close prices and analyzing thousands of entries, e.g. we're not just guessing by looking at charts and visuals)\n",
    "#### Taken alone it may be a weak indicator, but when combined with other data, it can help you make better data-driven decisions\n",
    "Of course there are many other uses for this type of output, I'm simply sharing how I leverage this sort of data analysis in my own day to day trading"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a782f8a7-e238-4592-970c-2ba886e0cb33",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
